#!/usr/bin/env perl
use strict;
use warnings;

=head1 NAME

createdb.pl - Create a new Yip CMS database with the appropriate
structure.

=head1 SYNOPSIS

  ./createdb.pl

=head1 DESCRIPTION

This script is used to create a new, empty CMS database for Yip, with
the appropriate structure but no records.  Uses Yip::DB and YipConfig,
so you must configure those two correctly before using this script.  See
the documentation in C<Yip::DB> for further information.

You must use the C<resetdb.pl> script on the newly created database
before it can be used properly.

The SQL string embedded in this script contains the complete database
structure.  The following subsections describe the function of each
table within the databsase.

=head2 cvars table

The C<cvars> tables stores configuration variables related to the
administration CGI scripts, as well as the C<epoch> and C<lastmod>
variables.  These variables can't be altered through the CGI
administration scripts, to prevent accidentally locking oneself out of
administration CGI or corrupting core functionality of the database.

This table is a simple key/value map where the key field is C<cvarskey>
and the value field is C<cvarsval>.  Each of the C<path> variables must
begin with a forward slash and should be URI path on the server, such
that they can be directly embedded within HTML element attribute values
without any further escaping.  The following variables are defined in
this table:

=over 4

=item C<epoch>

The number of seconds since midnight at the start of January 1, 1970
that the epoch used by the Yip CMS occurs.  Once set, this may not be
changed.  The C<lastmod> variable can not refer to times prior to this
epoch, so the C<epoch> must not be in the future.  Stored as an unsigned
base-16 string.

=item C<lastmod>

The number of seconds GMT since the epoch defined by the C<epoch>
variable for the last update of the CMS database that affects page
content.  This is used to generate ETag values for generated pages, so
that caching can work correctly.  This must be updated by scripts that
change the database in a way except for the C<cvars> and C<ctmpl>
tables.  It must have a value that is zero or greater, so it can not
refer to times before that specified by C<epoch>.  Stored as an unsigned
base-16 string.

=item C<authsuffix>

The name suffix of the cookie used for authorizing administrator CGI
operations.  Must be a sequence of one to 24 ASCII alphanumerics and
underscores.  To form the full cookie name, C<__Host-> will be prefixed
to this suffix, which means a cookie for only this specific domain, for
the whole domain, on HTTPS only.  Within the current domain, no other
CGI system should use cookies with the same cookie name.

=item C<authsecret>

A randomly generated string of 16 base-64 characters.  To generate a
value, begin with twelve random octets generated by C<Crypt::Random> and
then encode these twelve random octets into sixteen random base-64
characters.  This random key will be used to generate HMAC-MD5 digests
to validate client cookies for administrator CGI operations.  Each time
the secret key is changed, everyone currently "logged in" with a valid
cookie will immediately be logged out and have to authenticate again.

=item C<authlimit>

The number of minutes that an issued cookie value will work for before
it becomes invalid.  New cookies are issued at the end of each
successful operation, so this is essentially an inactivity timer, after
which authorization cookies automatically lose their validity.  Stored
as an unsigned decimal string.

=item C<authcost>

The bcrypt I<cost> parameter for hashing the password used in
C<authpswd>.  The higher the cost, the more difficult it is to break the
password hash, but the more time it takes to check a password.  Must be
an integer in range [5, 31].  Changing this has no effect on the current
password hash, so you must then reset the password for this to take
effect.  Stored as an unsigned decimal string.

=item C<authpswd>

The C<Crypt::Bcrypt> password hash of the password that must be provided
to login in and get an administrator cookie B<OR> the special value C<?>
which means that no password will currently work, except the password
reset script will accept any value for the current password.  The C<?>
therefore is used to initialize the system, after which the password is
reset to its appropriate value.  It can also be used for a password
reset if the current password is forgotten.

=item C<pathlogin>

Path to the login script.  GET requests get a prompt page, while POST
requests perform the login.

=item C<pathlogout>

Path to the logout script.  GET requests get a confirmation page, while
POST requests perform the logout.

=item C<pathreset>

Path to the password reset script.  GET requests get a prompt page,
while POST requests perform the reset.

=item c<pathadmin>

Path to the administrator control panel page, which has links to all the
other administration scripts.  Works only with GET method, and takes no
CGI parameters.

=item C<pathlist>

Path to the listing script.  This takes a GET query string containing a
single variable C<report> that must be one of the values C<types>
C<vars> C<templates> C<archives> C<globals> C<posts> and generates a
report for those types.  The C<templates> C<globals> and C<posts>
reports have links to C<pathdownload> and C<patharchive> scripts so that
any of the listed data items can be downloaded.  All reports have links
for each item leading to the C<pathdrop> script confirmation that allows
items to be dropped.

=item C<pathdrop>

Path to the drop script.  GET requests require a single variable whose
key identifies the type of resource to drop and whose value identifies
the ID of the resource to drop.  The key name might be one of C<type>
C<var> C<template> C<archive> C<global> C<post>.  The GET request is
a prompt page to confirm deletion, and then the POST request will
perform the actual drop.

=item C<pathupjson>

Path to the upload JSON script.  GET requests display an input form, and
POST requests perform the update.  The form allows JSON to be entered so
that multiple things may be updated at once.

=item C<pathuptmpl>

Path to the upload template script.  GET requests display an input form,
and POST requests perform the update.  The form allows the whole
template to be entered and transmitted.

=item C<pathupgres>

Path to the upload global resource script.  GET requests display an
input form, and POST requests perform the update.  File upload is used
to transfer the resource.

=item C<pathuppost>

Path to the upload post script.  GET requests display an input form, and
POST requests perform the update.  File upload is used to transfer the
post, which is contained within a Zip archive.

=item C<pathdownload>

Path to the download script.  This takes a GET query string with a
single variable whose key identifies the type of resource requested and
whose value identifies the ID of the resource.  The key name is either
C<template> or C<global>.  The script transfers the raw data contents.

=item C<patharchive>

Path to the archive post script.  GET requests require a single variable
C<post> whose value is the UID of the post that is being requested.
This shows a confirmation prompt.  The POST request will generate the
actual archive of the post to download.

=item C<pathgenuid>

Path to the UID generator script.  Takes a GET query string containing
a single variable C<table> that is either C<post> C<global> or
C<archive> indicating what type of object this UID is being generated
for.

=back

=cut

# @@TODO:

=head1 AUTHOR

Noah Johnson, C<noah.johnson@loupmail.com>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2022 Multimedia Data Technology Inc.

MIT License:

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files
(the "Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

=cut
