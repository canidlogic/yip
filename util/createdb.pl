#!/usr/bin/env perl
use strict;
use warnings;

=head1 NAME

createdb.pl - Create a new Yip CMS database with the appropriate
structure.

=head1 SYNOPSIS

  ./createdb.pl

=head1 DESCRIPTION

This script is used to create a new, empty CMS database for Yip, with
the appropriate structure but no records.  Uses Yip::DB and YipConfig,
so you must configure those two correctly before using this script.  See
the documentation in C<Yip::DB> for further information.

You must use the C<resetdb.pl> script on the newly created database
before it can be used properly.

The SQL string embedded in this script contains the complete database
structure.  The following subsections describe the function of each
table within the databsase.

=head2 bvars table

The C<bvars> tables stores configuration variables that can't be freely
altered because they are critical to the functioning of the CMS system
and core CGI scripts.  This is a simple key/value map where the key
field is C<bvarskey> and the value field is C<bvarsval>.  The following
variables are defined in this table:

=over 4

=item C<epoch>

The number of seconds since midnight at the start of January 1, 1970
that the epoch used by the Yip CMS occurs.  Once set, this may not be
changed.  The C<lastmod> variable can not refer to times prior to this
epoch, so the C<epoch> must not be in the future.  Stored as an unsigned
base-16 string.

=item C<lastmod>

The number of seconds GMT since the epoch defined by the C<epoch>
variable for the last update of the CMS database that affects page
content.  This is used to generate ETag values for generated pages, so
that caching can work correctly.  This must be updated by scripts that
change the database in a way that might change generated page content.
It must have a value that is zero or greater, so it can not refer to
times before that specified by C<epoch>.  Stored as an unsigned base-16
string.

=item C<authsuffix>

The name suffix of the cookie used for authorizing administrator CGI
operations.  Must be a sequence of one to 24 ASCII alphanumerics and
underscores.  To form the full cookie name, C<__Host-> will be prefixed
to this suffix, which means a cookie for only this specific domain, for
the whole domain, on HTTPS only.  Within the current domain, no other
CGI system should use cookies with the same cookie name.

=item C<authsecret>

A randomly generated string of 16 base-64 characters.  To generate a
value, begin with twelve random octets generated by C<Crypt::Random> and
then encode these twelve random octets into sixteen random base-64
characters.  This random key will be used to generate HMAC-MD5 digests
to validate client cookies for administrator CGI operations.  Each time
the secret key is changed, everyone currently "logged in" with a valid
cookie will immediately be logged out and have to authenticate again.

=item C<authlimit>

The number of minutes that an issued cookie value will work for before
it becomes invalid.  New cookies are issued at the end of each
successful operation, so this is essentially an inactivity timer, after
which authorization cookies automatically lose their validity.  Stored
as an unsigned decimal string.

=item C<authcost>

The bcrypt I<cost> parameter for hashing the password used in
C<authpswd>.  The higher the cost, the more difficult it is to break the
password hash, but the more time it takes to check a password.  Must be
an integer in range [5, 31].  Changing this has no effect on the current
password hash, so you must then reset the password for this to take
effect.  Stored as an unsigned decimal string.

=item C<authpswd>

The C<Crypt::Bcrypt> password hash of the password that must be provided
to login in and get an administrator cookie B<OR> the special value C<?>
which means that no password will currently work, except the password
reset script will accept any value for the current password.  The C<?>
therefore is used to initialize the system, after which the password is
reset to its appropriate value.  It can also be used for a password
reset if the current password is forgotten.

=item C<pathlogin>

The server local path to the login script.  Must begin with C</> and be
such that it can be directly embedded without any further escaping
within HTML element attribute values.

=item C<pathlogout>

The server local path to the logout script.  Must begin with C</> and be
such that it can be directly embedded without any further escaping
within HTML element attribute values.

=item C<pathreset>

The server local path to the password reset script.  Must begin with and
be such that it can be directly embedded without any further escaping
within HTML element attribute values.
C</>

=item C<pathpop>

The server local path to the pop configuration script.  Must begin with
C</> and be such that it can be directly embedded without any further
escaping within HTML element attribute values.

=item C<pathpoke>

The server local path to the poke template script.  Must begin with C</>
and be such that it can be directly embedded without any further
escaping within HTML element attribute values.

=item C<pathwipe>

The server local path to the wipe script.  Must begin with C</> and be
such that it can be directly embedded without any further escaping
within HTML element attribute values.

=back

=head2 btmpl table

The C<btmpl> table stores critical templates that can't be altered
without risking locking oneself out of CGI configuration.  This is a
simple key/value map where the keys name the template and the values
store the template encoded in UTF-8.  The following templates are
recognized.  (If there are other templates defined in the table, they
are ignored.)

All templates follow the template format defined by C<HTML::Template>.
Each template should have an HTML form within it with the C<action>
attribute set to C<action> template variable, the C<method> attribute
set to C<method> template variable, and the C<enctype> attribute set to
C<enctype> template variable.  The form should always have an submit
input control.  The other necessary controls are specific to the
particular template and documented below.  Do not add any extra controls
that will be submitted in the form or script submissions may fail with
error.

=over 4

=item C<login>

The HTML login page template.  Within the form, there should be a
password input with C<name> attribute set to the C<passname> template
variable.

=item C<logout>

The HTML logout page template.  Within the form, there should be a
hidden input with C<name> attribute set to C<timename> template variable
and C<value> attribute set to C<timeval> template variable.  There
should also be a hidden input with C<name> attribute set to C<checkname>
template variable and C<value> attribute set to C<checkval> template
variable.

=item C<reset>

The HTML password reset page template.  Within the form, there should be
a password input with C<name> attribute set to the C<passold> template
variable, a password input with C<name> attribute set to the C<passnew>
template variable, and a password input with C<name> attribute set to
the C<passdup> template variable.  (The C<passdup> field is another copy
of the new password to check for a user typo.)

=item C<pop>

The HTML configuration variable pop page template.  Within the form,
there should be textarea element with C<name> attribute set to the
C<inputname> template variable.  The user will fill in this textarea
with JSON storing a JSON object that maps keys to scalar values, which
sets or adds these configuration variables into the C<vars> table.

=item C<poke>

The HTML template set page template.  Within the form, there should be
an input element with C<name> attribute set to the C<inputkey> template
variable.  There should also be a textarea element with C<name>
attribute set to the C<inputname> template variable.  The user will fill
in the target template name in the key field and then the template code
in the textarea.  The template will be added or updated in the C<tmpl>
table.

=item C<wipe>

The HTML configuration variable and template wipe page template.  Within
the form, there should be two radio input controls, both of which have
their C<name> attribute set to the C<radioname> template variable.  One
of the radio input controls has its C<value> set to the C<radiovar>
template variable, and the other has its C<value> set to the
C<radiotmpl> template variable.  You should specify the C<checked>
attribute on exactly one of these radio controls to set the default
selection; which control the default selection is on doesn't matter.
There should also be an input element with C<name> set to C<inputname>
template variable.  The input control names a template or configuration
variable to drop from C<vars> or C<tmpl> tables, and the radio control
selects whether this is a template or a variable that is being dropped.

=back

=cut

# @@TODO:

=head1 AUTHOR

Noah Johnson, C<noah.johnson@loupmail.com>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2022 Multimedia Data Technology Inc.

MIT License:

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files
(the "Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

=cut
